[{"/home/user/React/Todo-Hub/src/index.js":"1","/home/user/React/Todo-Hub/src/App.js":"2","/home/user/React/Todo-Hub/src/redux/store.js":"3","/home/user/React/Todo-Hub/src/redux/boardsSlice.js":"4","/home/user/React/Todo-Hub/src/components/EmptyBoard.js":"5","/home/user/React/Todo-Hub/src/components/Header.js":"6","/home/user/React/Todo-Hub/src/components/Home.js":"7","/home/user/React/Todo-Hub/src/components/Column.js":"8","/home/user/React/Todo-Hub/src/components/ElipsisMenu.js":"9","/home/user/React/Todo-Hub/src/components/Sidebar.js":"10","/home/user/React/Todo-Hub/src/components/HeaderDropDown.js":"11","/home/user/React/Todo-Hub/src/modals/AddEditBoardModal.js":"12","/home/user/React/Todo-Hub/src/modals/AddEditTaskModal.js":"13","/home/user/React/Todo-Hub/src/modals/DeleteModal.js":"14","/home/user/React/Todo-Hub/src/components/Task.js":"15","/home/user/React/Todo-Hub/src/hooks/useDarkMode.js":"16","/home/user/React/Todo-Hub/src/modals/TaskModal.js":"17","/home/user/React/Todo-Hub/src/components/Subtask.js":"18"},{"size":379,"mtime":1682352056000,"results":"19","hashOfConfig":"20"},{"size":1127,"mtime":1709308657974,"results":"21","hashOfConfig":"20"},{"size":235,"mtime":1709303302560,"results":"22","hashOfConfig":"20"},{"size":4296,"mtime":1711966430985,"results":"23","hashOfConfig":"20"},{"size":1101,"mtime":1682352056000,"results":"24","hashOfConfig":"20"},{"size":4592,"mtime":1711974469269,"results":"25","hashOfConfig":"20"},{"size":2401,"mtime":1709293320973,"results":"26","hashOfConfig":"20"},{"size":1678,"mtime":1682352056000,"results":"27","hashOfConfig":"20"},{"size":899,"mtime":1711973110236,"results":"28","hashOfConfig":"20"},{"size":5487,"mtime":1711977026807,"results":"29","hashOfConfig":"20"},{"size":3308,"mtime":1709307448145,"results":"30","hashOfConfig":"20"},{"size":4888,"mtime":1682352056000,"results":"31","hashOfConfig":"20"},{"size":7354,"mtime":1682352056000,"results":"32","hashOfConfig":"20"},{"size":2125,"mtime":1711973387979,"results":"33","hashOfConfig":"20"},{"size":1622,"mtime":1711976328005,"results":"34","hashOfConfig":"20"},{"size":468,"mtime":1682352056000,"results":"35","hashOfConfig":"20"},{"size":4967,"mtime":1682352056000,"results":"36","hashOfConfig":"20"},{"size":1183,"mtime":1682352056000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xyhu1j",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/React/Todo-Hub/src/index.js",[],[],"/home/user/React/Todo-Hub/src/App.js",[],[],"/home/user/React/Todo-Hub/src/redux/store.js",[],[],"/home/user/React/Todo-Hub/src/redux/boardsSlice.js",[],[],"/home/user/React/Todo-Hub/src/components/EmptyBoard.js",[],[],"/home/user/React/Todo-Hub/src/components/Header.js",[],[],"/home/user/React/Todo-Hub/src/components/Home.js",[],[],"/home/user/React/Todo-Hub/src/components/Column.js",["98"],[],"import { shuffle } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport Task from \"./Task\";\n\nfunction Column({ colIndex }) {\n  const colors = [\n    \"bg-red-500\",\n    \"bg-orange-500\",\n    \"bg-blue-500\",\n    \"bg-purple-500\",\n    \"bg-green-500\",\n    \"bg-indigo-500\",\n    \"bg-yellow-500\",\n    \"bg-pink-500\",\n    \"bg-sky-500\",\n  ];\n\n  \n\n  const dispatch = useDispatch();\n  const [color, setColor] = useState(null)\n  const boards = useSelector((state) => state.boards);\n  const board = boards.find((board) => board.isActive === true);\n  const col = board.columns.find((col, i) => i === colIndex);\n  useEffect(() => {\n    setColor(shuffle(colors).pop())\n  }, [dispatch]);\n\n\n\n  const handleOnDrop = (e) => {\n    const { prevColIndex, taskIndex } = JSON.parse(\n      e.dataTransfer.getData(\"text\")\n    );\n\n    if (colIndex !== prevColIndex) {\n      dispatch(\n        boardsSlice.actions.dragTask({ colIndex, prevColIndex, taskIndex })\n      );\n    }\n  };\n\n  const handleOnDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div\n      onDrop={handleOnDrop}\n      onDragOver={handleOnDragOver}\n      className=\"scrollbar-hide   mx-5 pt-[90px] min-w-[280px] \"\n    >\n      <p className=\" font-semibold flex  items-center  gap-2 tracking-widest md:tracking-[.2em] text-[#828fa3]\">\n        <div className={`rounded-full w-4 h-4 ${color} `} />\n        {col.name} ({col.tasks.length})\n      </p>\n\n      {col.tasks.map((task, index) => (\n        <Task key={index} taskIndex={index} colIndex={colIndex} />\n      ))}\n    </div>\n  );\n}\n\nexport default Column;\n","/home/user/React/Todo-Hub/src/components/ElipsisMenu.js",[],[],"/home/user/React/Todo-Hub/src/components/Sidebar.js",["99","100"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"@headlessui/react\";\nimport boardIcon from \"../assets/icon-board.svg\";\nimport useDarkMode from \"../hooks/useDarkMode\";\nimport darkIcon from \"../assets/icon-dark-theme.svg\";\nimport lightIcon from \"../assets/icon-light-theme.svg\";\nimport elipsis from \"../assets/icon-vertical-ellipsis.svg\";\n\n\nimport showSidebarIcon from \"../assets/icon-show-sidebar.svg\";\nimport hideSidebarIcon from \"../assets/icon-hide-sidebar.svg\";\n\nimport boardsSlice from \"../redux/boardsSlice\";\nimport AddEditBoardModal from \"../modals/AddEditBoardModal\";\n\nfunction Sidebar({ isSideBarOpen, setIsSideBarOpen }) {\n  const dispatch = useDispatch();\n  const [isBoardModalOpen, setIsBoardModalOpen] = useState(false);\n  const [colorTheme, setTheme] = useDarkMode();\n  const [darkSide, setDarkSide] = useState(\n    colorTheme === \"light\" ? true : false\n  );\n\n  const toggleDarkMode = (checked) => {\n    setTheme(colorTheme);\n    setDarkSide(checked);\n  };\n\n  const boards = useSelector((state) => state.boards);\n\n  const toggleSidebar = () => {\n    setIsSideBarOpen((curr) => !curr);\n  };\n\n  return (\n    <div>\n      <div\n        className={\n          isSideBarOpen\n            ? `min-w-[261px] bg-[#e4e4e4] dark:bg-[#2b2c37]  fixed top-[72px] h-screen  items-center left-0 z-20`\n            : ` bg-[#635FC7] dark:bg-[#2b2c37] dark:hover:bg-[#635FC7] top-auto bottom-10 justify-center items-center hover:opacity-80 cursor-pointer  p-0 transition duration-300 transform fixed felx w-[56px] h-[48px] rounded-r-full  `\n        }\n      >\n        <div>\n          {/* reWrite modal  */}\n\n          {isSideBarOpen && (\n            <div className=\" bg-[#e4e4e4]  dark:bg-[#2b2c37]    w-full   py-4 rounded-xl\">\n              <h3 className=\" dark:text-gray-300 text-gray-800 font-semibold mx-4 mb-8 \">\n                ALL BOARDS ({boards?.length})\n              </h3>\n\n              <div className=\"  dropdown-borad flex flex-col h-[70vh]  justify-between \">\n                <div>\n                  {boards.map((board, index) => (\n                    <div\n                      className={` flex items-baseline space-x-2 px-5 mr-8 rounded-r-full duration-500 ease-in-out py-4 cursor-pointer hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white dark:hover:text-[#635fc7] dark:text-white  ${\n                        board.isActive &&\n                        \" bg-[#635fc7] rounded-r-full text-white mr-8 \"\n                      } `}\n                      key={index}\n                      onClick={() => {\n                        dispatch(boardsSlice.actions.setBoardActive({ index }));\n                      }}\n                    >\n                      <img src={boardIcon} className=\"  filter-white  h-4 \" />{\" \"}\n                      <p className=\" text-lg font-bold \">{board.name}</p>\n                    </div>\n                  ))}\n\n                  <div\n                    className=\" flex  items-baseline space-x-2  mr-8 rounded-r-full duration-500 ease-in-out cursor-pointer text-[#635fc7] px-5 py-4 hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white  \"\n                    onClick={() => {\n                      setIsBoardModalOpen(true);\n                    }}\n                  >\n                    <img src={elipsis} className=\"   filter-white  h-4 \" />\n                    <p className=\" text-lg font-bold  \">Create New Board </p>\n                  </div>\n                </div>\n\n                <div className=\" mx-2  p-4 relative space-x-2 bg-slate-100 dark:bg-[#20212c] flex justify-center items-center rounded-lg\">\n                  <img src={lightIcon} alt=\"sun indicating light mode\" />\n\n                  <Switch\n                    checked={darkSide}\n                    onChange={toggleDarkMode}\n                    className={`${\n                      darkSide ? \"bg-[#635fc7]\" : \"bg-gray-200\"\n                    } relative inline-flex h-6 w-11 items-center rounded-full`}\n                  >\n                    <span\n                      className={`${\n                        darkSide ? \"translate-x-6\" : \"translate-x-1\"\n                      } inline-block h-4 w-4 transform rounded-full bg-white transition`}\n                    />\n                  </Switch>\n\n                  <img src={darkIcon} alt=\"moon indicating dark mode\" />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Sidebar hide/show toggle */}\n          {isSideBarOpen ? (\n            <div\n              onClick={() => toggleSidebar()}\n              className=\" flex  items-center mt-2  absolute bottom-16  text-lg font-bold  rounded-r-full hover:text-[#635FC7] cursor-pointer mr-6 mb-8 px-8 py-4 hover:bg-[#635fc71a] dark:hover:bg-white  space-x-2 justify-center  my-4 text-gray-500 \"\n            >\n              <img\n                className=\" min-w-[20px]\"\n                src={hideSidebarIcon}\n                alt=\" side bar show/hide\"\n              />\n              {isSideBarOpen && <p> Hide Sidebar </p>}\n            </div>\n          ) : (\n            <div className=\" absolute p-5  \" onClick={() => toggleSidebar()}>\n              <img src={showSidebarIcon} alt=\"showSidebarIcon\" />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {isBoardModalOpen && (\n        <AddEditBoardModal\n          type=\"add\"\n          setIsBoardModalOpen={setIsBoardModalOpen}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/user/React/Todo-Hub/src/components/HeaderDropDown.js",["101","102"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"@headlessui/react\";\nimport boardIcon from \"../assets/icon-board.svg\";\nimport useDarkMode from \"../hooks/useDarkMode\";\nimport darkIcon from \"../assets/icon-dark-theme.svg\";\nimport lightIcon from \"../assets/icon-light-theme.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport elipsis from \"../assets/icon-vertical-ellipsis.svg\";\n\n\nfunction HeaderDropDown({ setOpenDropdown, setIsBoardModalOpen }) {\n  const dispatch = useDispatch()\n  const [colorTheme, setTheme] = useDarkMode();\n  const [darkSide, setDarkSide] = useState(\n    colorTheme === \"light\" ? true : false\n  );\n\n  const toggleDarkMode = (checked) => {\n    setTheme(colorTheme);\n    setDarkSide(checked);\n  };\n\n  const boards = useSelector((state) => state.boards);\n\n  return (\n    <div\n      className=\" py-10 px-6 absolute  left-0 right-0 bottom-[-100vh] top-16 dropdown \"\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setOpenDropdown(false);\n      }}\n    >\n      {/* DropDown Modal */}\n\n      <div className=\" bg-white dark:bg-[#2b2c37] shadow-md shadow-[#364e7e1a]  w-full   py-4 rounded-xl\">\n        <h3 className=\" dark:text-gray-300 text-gray-600 font-semibold mx-4 mb-8 \">\n          ALL BOARDS ({boards?.length})\n        </h3>\n\n        <div className=\" dropdown-borad  \">\n          {boards.map((board, index) => (\n            <div\n              className={` flex items-baseline space-x-2 px-5 py-4  ${\n                board.isActive &&\n                \" bg-[#635fc7] rounded-r-full text-white mr-8 \"\n              } `}\n              key={index}\n              onClick={() => {\n                dispatch(boardsSlice.actions.setBoardActive({ index }));\n              }}\n            >\n              <img src={boardIcon} className=\"  filter-white  h-4 \" />{\" \"}\n              <p className=\" text-lg font-bold  \">{board.name}</p>\n            </div>\n          ))}\n\n          <div \n          onClick={() => {\n            setIsBoardModalOpen(true);\n            setOpenDropdown(false)\n          }}\n          className=\" flex items-baseline space-x-2  text-[#635fc7] px-5 py-4  \">\n            <img src={elipsis} className=\"   filter-white  h-4 \" />\n            <p className=\" text-lg font-bold  \">Create New Board </p>\n          </div>\n\n          <div className=\" mx-2  p-4  space-x-2 bg-slate-100 dark:bg-[#20212c] flex justify-center items-center rounded-lg\">\n            <img src={lightIcon} alt=\"sun indicating light mode\" />\n\n            <Switch\n              checked={darkSide}\n              onChange={toggleDarkMode}\n              className={`${\n                darkSide ? \"bg-[#635fc7]\" : \"bg-gray-200\"\n              } relative inline-flex h-6 w-11 items-center rounded-full`}\n            >\n              <span className=\"sr-only\">Enable notifications</span>\n              <span\n                className={`${\n                  darkSide ? \"translate-x-6\" : \"translate-x-1\"\n                } inline-block h-4 w-4 transform rounded-full bg-white transition`}\n              />\n            </Switch>\n\n            <img src={darkIcon} alt=\"moon indicating dark mode\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HeaderDropDown;\n","/home/user/React/Todo-Hub/src/modals/AddEditBoardModal.js",["103","104"],[],"import React, { useState } from \"react\";\nimport crossIcon from \"../assets/icon-cross.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddEditBoardModal({ setIsBoardModalOpen, type , }) {\n  const dispatch = useDispatch();\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [name, setName] = useState(\"\");\n  const [newColumns, setNewColumns] = useState([\n    { name: \"Todo\", tasks: [], id: uuidv4() },\n    { name: \"Doing\", tasks: [], id: uuidv4() },\n  ]);\n  const [isValid, setIsValid] = useState(true);\n  const board = useSelector((state) => state.boards).find(\n    (board) => board.isActive\n  );\n\n  if (type === \"edit\" && isFirstLoad) {\n    setNewColumns(\n      board.columns.map((col) => {\n        return { ...col, id: uuidv4() };\n      })\n    );\n    setName(board.name);\n    setIsFirstLoad(false);\n  }\n\n  const validate = () => {\n    setIsValid(false);\n    if (!name.trim()) {\n      return false;\n    }\n    for (let i = 0 ; i < newColumns.length ; i++) {\n      if (!newColumns[i].name.trim()) {\n        return false;\n      }\n    }\n    setIsValid(true);\n    return true;\n  };\n\n  const onChange = (id, newValue) => {\n    setNewColumns((prevState) => {\n      const newState = [...prevState];\n      const column = newState.find((col) => col.id === id);\n      column.name = newValue;\n      return newState;\n    });\n  };\n\n  const onDelete = (id) => {\n    setNewColumns((prevState) => prevState.filter((el) => el.id !== id));\n  };\n\n  const onSubmit = (type) => {\n    setIsBoardModalOpen(false);\n    if (type === \"add\") {\n      dispatch(boardsSlice.actions.addBoard({ name, newColumns }));\n    } else {\n      dispatch(boardsSlice.actions.editBoard({ name, newColumns }));\n    }\n  };\n\n  return (\n    <div\n      className=\"  fixed right-0 top-0 px-2 py-4 overflow-scroll scrollbar-hide  z-50 left-0 bottom-0 justify-center items-center flex dropdown \"\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setIsBoardModalOpen(false);\n      }}\n    >\n      <div\n        className=\" scrollbar-hide overflow-y-scroll max-h-[95vh]  bg-white dark:bg-[#2b2c37] text-black dark:text-white font-bold\n       shadow-md shadow-[#364e7e1a] max-w-md mx-auto my-auto w-full px-8  py-8 rounded-xl\"\n      >\n        <h3 className=\" text-lg \">\n          {type === \"edit\" ? \"Edit\" : \"Add New\"} Board\n        </h3>\n\n        {/* Task Name */}\n\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Board Name\n          </label>\n          <input\n            className=\" bg-transparent  px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-1  ring-0  \"\n            placeholder=\" e.g Web Design\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            id=\"board-name-input\"\n          />\n        </div>\n\n        {/* Board Columns */}\n\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\" text-sm dark:text-white text-gray-500\">\n            Board Columns\n          </label>\n\n          {newColumns.map((column, index) => (\n            <div key={index} className=\" flex items-center w-full \">\n              <input\n                className=\" bg-transparent flex-grow px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px]  \"\n                onChange={(e) => {\n                  onChange(column.id, e.target.value);\n                }}\n                type=\"text\"\n                value={column.name}\n              />\n              <img\n                src={crossIcon}\n                onClick={() => {\n                  onDelete(column.id);\n                }}\n                className=\" m-4 cursor-pointer \"\n              />\n            </div>\n          ))}\n          <div>\n            <button\n              className=\" w-full items-center hover:opacity-70 dark:text-[#635fc7] dark:bg-white  text-white bg-[#635fc7] py-2 rounded-full \"\n              onClick={() => {\n                setNewColumns((state) => [\n                  ...state,\n                  { name: \"\", tasks: [], id: uuidv4() },\n                ]);\n              }}\n            >\n              + Add New Column\n            </button>\n            <button\n              onClick={() => {\n                const isValid = validate();\n                if (isValid === true) onSubmit(type);\n              }}\n              className=\" w-full items-center hover:opacity-70 dark:text-white dark:bg-[#635fc7] mt-8 relative  text-white bg-[#635fc7] py-2 rounded-full\"\n            >\n              {type === \"add\" ? \"Create New Board\" : \"Save Changes\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddEditBoardModal;\n","/home/user/React/Todo-Hub/src/modals/AddEditTaskModal.js",["105","106"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport crossIcon from \"../assets/icon-cross.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\n\nfunction AddEditTaskModal({\n  type,\n  device,\n  setIsTaskModalOpen,\n  setIsAddTaskModalOpen,\n  taskIndex,\n  prevColIndex = 0,\n}) {\n  const dispatch = useDispatch();\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [isValid, setIsValid] = useState(true);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const board = useSelector((state) => state.boards).find(\n    (board) => board.isActive\n  );\n\n  const columns = board.columns;\n  const col = columns.find((col, index) => index === prevColIndex);\n  const task = col ? col.tasks.find((task, index) => index === taskIndex) : [];\n  const [status, setStatus] = useState(columns[prevColIndex].name);\n  const [newColIndex, setNewColIndex] = useState(prevColIndex);\n  const [subtasks, setSubtasks] = useState([\n    { title: \"\", isCompleted: false, id: uuidv4() },\n    { title: \"\", isCompleted: false, id: uuidv4() },\n  ]);\n\n  const onChangeSubtasks = (id, newValue) => {\n    setSubtasks((prevState) => {\n      const newState = [...prevState];\n      const subtask = newState.find((subtask) => subtask.id === id);\n      subtask.title = newValue;\n      return newState;\n    });\n  };\n\n  const onChangeStatus = (e) => {\n    setStatus(e.target.value);\n    setNewColIndex(e.target.selectedIndex);\n  };\n\n  const validate = () => {\n    setIsValid(false);\n    if (!title.trim()) {\n      return false;\n    }\n    for (let i = 0; i < subtasks.length; i++) {\n      if (!subtasks[i].title.trim()) {\n        return false;\n      }\n    }\n    setIsValid(true);\n    return true;\n  };\n\n  if (type === \"edit\" && isFirstLoad) {\n    setSubtasks(\n      task.subtasks.map((subtask) => {\n        return { ...subtask, id: uuidv4() };\n      })\n    );\n    setTitle(task.title);\n    setDescription(task.description);\n    setIsFirstLoad(false);\n  }\n\n  const onDelete = (id) => {\n    setSubtasks((prevState) => prevState.filter((el) => el.id !== id));\n  };\n\n  const onSubmit = (type) => {\n    if (type === \"add\") {\n      dispatch(\n        boardsSlice.actions.addTask({\n          title,\n          description,\n          subtasks,\n          status,\n          newColIndex,\n        })\n      );\n    } else {\n      dispatch(\n        boardsSlice.actions.editTask({\n          title,\n          description,\n          subtasks,\n          status,\n          taskIndex,\n          prevColIndex,\n          newColIndex,\n        })\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        device === \"mobile\"\n          ? \"  py-6 px-6 pb-40  absolute overflow-y-scroll  left-0 flex  right-0 bottom-[-100vh] top-0 dropdown \"\n          : \"  py-6 px-6 pb-40  absolute overflow-y-scroll  left-0 flex  right-0 bottom-0 top-0 dropdown \"\n      }\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setIsAddTaskModalOpen(false);\n      }}\n    >\n      {/* Modal Section */}\n\n      <div\n        className=\" scrollbar-hide overflow-y-scroll max-h-[95vh]  my-auto  bg-white dark:bg-[#2b2c37] text-black dark:text-white font-bold\n       shadow-md shadow-[#364e7e1a] max-w-md mx-auto  w-full px-8  py-8 rounded-xl\"\n      >\n        <h3 className=\" text-lg \">\n          {type === \"edit\" ? \"Edit\" : \"Add New\"} Task\n        </h3>\n\n        {/* Task Name */}\n\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Task Name\n          </label>\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            id=\"task-name-input\"\n            type=\"text\"\n            className=\" bg-transparent  px-4 py-2 outline-none focus:border-0 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-1  ring-0  \"\n            placeholder=\" e.g Take coffee break\"\n          />\n        </div>\n\n        {/* Description */}\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Description\n          </label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            id=\"task-description-input\"\n            className=\" bg-transparent outline-none min-h-[200px] focus:border-0 px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px] \"\n            placeholder=\"e.g. It's always good to take a break. This \n            15 minute break will  recharge the batteries \n            a little.\"\n          />\n        </div>\n\n        {/* Subtasks */}\n\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Subtasks\n          </label>\n\n          {subtasks.map((subtask, index) => (\n            <div key={index} className=\" flex items-center w-full \">\n              <input\n                onChange={(e) => {\n                  onChangeSubtasks(subtask.id, e.target.value);\n                }}\n                type=\"text\"\n                value={subtask.title}\n                className=\" bg-transparent outline-none focus:border-0 flex-grow px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px]  \"\n                placeholder=\" e.g Take coffee break\"\n              />\n              <img\n                src={crossIcon}\n                onClick={() => {\n                  onDelete(subtask.id);\n                }}\n                className=\" m-4 cursor-pointer \"\n              />\n            </div>\n          ))}\n\n          <button\n            className=\" w-full items-center dark:text-[#635fc7] dark:bg-white  text-white bg-[#635fc7] py-2 rounded-full \"\n            onClick={() => {\n              setSubtasks((state) => [\n                ...state,\n                { title: \"\", isCompleted: false, id: uuidv4() },\n              ]);\n            }}\n          >\n            + Add New Subtask\n          </button>\n        </div>\n\n        {/* current Status  */}\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Current Status\n          </label>\n          <select\n            value={status}\n            onChange={onChangeStatus}\n            className=\" select-status flex-grow px-4 py-2 rounded-md text-sm bg-transparent focus:border-0  border-[1px] border-gray-300 focus:outline-[#635fc7] outline-none\"\n          >\n            {columns.map((column, index) => (\n              <option key={index}>{column.name}</option>\n            ))}\n          </select>\n          <button\n            onClick={() => {\n              const isValid = validate();\n              if (isValid) {\n                onSubmit(type);\n                setIsAddTaskModalOpen(false);\n                type === \"edit\" && setIsTaskModalOpen(false);\n              }\n            }}\n            className=\" w-full items-center text-white bg-[#635fc7] py-2 rounded-full \"\n          >\n           {type === \"edit\" ? \" save edit\" : \"Create task\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddEditTaskModal;\n","/home/user/React/Todo-Hub/src/modals/DeleteModal.js",[],[],"/home/user/React/Todo-Hub/src/components/Task.js",[],[],"/home/user/React/Todo-Hub/src/hooks/useDarkMode.js",["107"],[],"import React, { useEffect, useState } from 'react'\n\nfunction useDarkMode() {\n    \n  const [theme, setTheme] = useState(localStorage.theme)\n  const colorTheme = theme === \"dark\" ? \"light\" : \"dark\";\n\n  useEffect(() => {\n\n    const root = window.document.documentElement;\n    root.classList.remove(colorTheme);\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n\n}, [theme, colorTheme]);\n\nreturn [colorTheme, setTheme]\n\n}\n\nexport default useDarkMode","/home/user/React/Todo-Hub/src/modals/TaskModal.js",[],[],"/home/user/React/Todo-Hub/src/components/Subtask.js",[],[],{"ruleId":"108","severity":1,"message":"109","line":29,"column":6,"nodeType":"110","endLine":29,"endColumn":16,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":67,"column":23,"nodeType":"114","endLine":67,"endColumn":79},{"ruleId":"112","severity":1,"message":"113","line":78,"column":21,"nodeType":"114","endLine":78,"endColumn":76},{"ruleId":"112","severity":1,"message":"113","line":55,"column":15,"nodeType":"114","endLine":55,"endColumn":71},{"ruleId":"112","severity":1,"message":"113","line":66,"column":13,"nodeType":"114","endLine":66,"endColumn":68},{"ruleId":"115","severity":1,"message":"116","line":15,"column":10,"nodeType":"117","messageId":"118","endLine":15,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":116,"column":15,"nodeType":"114","endLine":122,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":17,"column":10,"nodeType":"117","messageId":"118","endLine":17,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":177,"column":15,"nodeType":"114","endLine":183,"endColumn":17},{"ruleId":"115","severity":1,"message":"119","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.","ArrayExpression",["120"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'isValid' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.",{"desc":"121","fix":"122"},"Update the dependencies array to be: [colors, dispatch]",{"range":"123","text":"124"},[777,787],"[colors, dispatch]"]